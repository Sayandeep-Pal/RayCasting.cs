using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;
using UnityEngine.UI;

public class RayCasting : MonoBehaviour
{
    public Camera Playercamera;

    public float Firerate = 10f;
    private float timeBeteenNextShot;
    public float damage = 20f;
    public CamMovement mouse;
    public GameObject mudeffect;
    public GameObject bulleteffect;
    public GameObject Smokeeffect;


    [Header("Recoil")]
    public float vRecoil = 1f;
    public float hRecoil = 1f;

    //this is ammo area 
    [Header("Ammo Manegment")]
    public int ammocount = 30;
    public int availableammo = 100;
    public int maxammo = 30;
    public Animator anim;
    public Text currentammo;

    public Animator aimAnim;
    public bool aim;

    public GameObject fireEffect;

    private bool isReloading = false;


    [Header("SoundFX")]
    public AudioSource src;
    public AudioClip bullet, reloadFX;



    void Update()
    {
        if (Input.GetButtonDown("Fire2"))
        {
            aim = !aim;
        }
        if (aim == true)
        {
            aimAnim.SetBool("Aim", true);

        }
        else
        {
            aimAnim.SetBool("Aim", false);

        }
        currentammo.text = ammocount.ToString();
        if ((Input.GetKeyDown(KeyCode.R) && ammocount < maxammo) || ammocount <= 0)
        {
            isReloading = true;
            StartCoroutine(reloadFXCoroutine());
        }

        //if (ammocount <= 0)
        //{
        //    StartCoroutine(reloadFXCoroutine());
        //    mouse.AddRecoil(0, 0);
        //    anim.SetBool("Reload", true);
        //    anim.SetBool("Shoot", false);
        //    fireEffect.SetActive(false);
        //    return;
        //}
        
        if(isReloading == true)
        {

            mouse.AddRecoil(0, 0);
            anim.SetBool("Reload", true);
            anim.SetBool("Shoot", false);
            fireEffect.SetActive(false);
            StartCoroutine(ReloadCoroutine());

        }
        
        if (Input.GetButton("Fire1") && Time.time >= timeBeteenNextShot && isReloading== false)
        {
            timeBeteenNextShot = Time.time + 1f / Firerate;
            float h = Random.Range(-hRecoil, hRecoil);
            anim.SetBool("Shoot", true);
            mouse.AddRecoil(h, vRecoil);
            
            Weapon();
        }
        if (Input.GetButtonUp("Fire1"))
        {
            mouse.AddRecoil(0, 0);
            anim.SetBool("Shoot", false);
            fireEffect.SetActive(false);
        }
        
    }

    void Weapon()
    {
        src.clip = bullet;
        src.Play();
            ammocount--;
            fireEffect.SetActive(true);
            RaycastHit hit;
            if (Physics.Raycast(Playercamera.transform.position, Playercamera.transform.forward, out hit))
            {
                Instantiate(mudeffect, hit.point, Quaternion.LookRotation(hit.normal));
                if (hit.transform.CompareTag("Enemy"))
                {
                    Health enemy = hit.transform.GetComponent<Health>();
                    enemy.Damage(damage);
                }
                else
                {
                    GameObject obj1 = Instantiate(bulleteffect, hit.point, Quaternion.identity, hit.transform);
                    obj1.transform.rotation = Quaternion.LookRotation(hit.normal);

                    GameObject obj2 = Instantiate(Smokeeffect, hit.point, Quaternion.identity, hit.transform);
                    obj2.transform.rotation = Quaternion.LookRotation(hit.normal);
                }
            }
        
    }


    public void Reload()
    {
        fireEffect.SetActive(false);
        availableammo = availableammo - maxammo + ammocount;
        ammocount = maxammo;
        anim.SetBool("Reload", false);
    }

    IEnumerator ReloadCoroutine()
    {
        yield return new WaitForSeconds(5.14f);
        isReloading = false;
    }
    IEnumerator reloadFXCoroutine()
    {
        yield return new WaitForSeconds(0.5f);
        src.clip = reloadFX;
        src.Play();
    }

}

